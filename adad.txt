#include<stdio.h>
#include<sys/time.h>
#include<sys/resource.h>
#include<stdlib.h>

# define n 5
int arr[n];

int selectionsort(){
    
    int i, j, min;
    printf("Enter the array \n");

    for(i = 0; i < n; i++){
        scanf("%d", &arr[i]);
    }
    
    
    for (i = 0; i < n-1; i++) {
        min = i;
        for (j = i+1; j < n; j++) {
            if (arr[j] < arr[min])
                min = j;
        }
        int temp = arr[min];
        arr[min] = arr[i];
        arr[i] = temp;
    }
     printf("The sorted array is \n");
    for(i = 0; i < n; i++){
        printf("%d ", arr[i]);
    }

}







int main(){
    
    
    struct timeval tv1,tv2;
    
    struct rusage r1,r2;
    getrusage(RUSAGE_SELF, &r2);
    
    gettimeofday(&tv1,NULL);

    
    selectionsort();
    
    gettimeofday(&tv2,NULL);
    
    
    long timetaken=tv2.tv_sec-tv1.tv_sec;
    printf("time taken is = %ld ms \n", timetaken);
    
    printf(" space complexity= %ld Kb \n",r2.ru_maxrss);
    
    
    return 0;
}



/////////////////////////////////


#include<stdio.h>
#include<sys/resource.h>
#include<sys/time.h>
#include<stdlib.h>

#define N 4
int arr[N];



int insertionsort(){

int i,j;
int temp;

printf("Enter the array ");

for(i = 0; i < N; i++){
scanf("%d", &arr[i]);
}

for(i = 1; i < N; i++){
temp = arr[i];
j = i - 1;

while(j >= 0 && arr[j] > temp){
arr[j + 1] = arr[j];
j--;
}
arr[j + 1] = temp;
}

printf("The sorted array is \n");
for(i = 0; i < N; i++){
printf("%d ", arr[i]);
}
return 0;
}

int main(){


struct timeval tv1,tv2;

gettimeofday(&tv1,NULL);

struct rusage r1,r2;

insertionsort();

gettimeofday(&tv2,NULL);


long timetaken=tv2.tv_sec-tv1.tv_sec;
printf("time taken is = %ld ms ", timetaken);


return 0;
}





////////////////////////




#include<stdio.h>
#include<time.h>
#include<sys/resource.h>
void quickSort(int arr[], int low, int high);
int partition(int arr[], int low, int high);

int main() {
    struct timeval tv1, tv2;
    struct rusage r_usage;
    int n;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter the elements: ");
    for(int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    gettimeofday(&tv1, NULL);

    quickSort(arr, 0, n - 1);

    gettimeofday(&tv2, NULL);

    printf("Sorted array: ");
    for(int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    printf("Time of Quick Sort: %f microseconds\n", (double)(tv2.tv_usec - tv1.tv_usec));

    getrusage(RUSAGE_SELF, &r_usage);

    printf("Memory used: %ld bytes\n", r_usage.ru_maxrss * 1024);

    return 0;
}


void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}


int partition(int arr[], int low, int high) {
    int pivot = arr[high];  
    int i = (low - 1);  

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    }
    int temp = arr[i + 1];
    arr[i + 1] = arr[high];
    arr[high] = temp;
    return (i + 1);
}


////////////////////////////////////



#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/resource.h>

void merge(int arr[], int l, int m, int r);
void mergeSort(int arr[], int l, int r);

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

void printArray(int arr[], int n) {
    printf("Sorted array: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    struct timeval start, end;
    gettimeofday(&start, NULL);

    struct rusage usage_start, usage_end;
    getrusage(RUSAGE_SELF, &usage_start);

    mergeSort(arr, 0, n - 1);
    printf("Sorted ");
    printArray(arr, n);

    getrusage(RUSAGE_SELF, &usage_end);
    gettimeofday(&end, NULL);

    long time_taken_seconds = (end.tv_sec - start.tv_sec);
    long time_taken_microseconds = (end.tv_usec - start.tv_usec);
    printf("Time taken: %ld seconds %ld microseconds\n", time_taken_seconds, time_taken_microseconds);

    printf("Space used: %ld kilobytes\n", usage_end.ru_maxrss);

    return 0;
}


/////////////////////////////////////




#include<stdio.h>
#include<sys/time.h>
#include<time.h>
#include<sys/resource.h>
void bfs(int v, int n, int a[][20], int visited[], int q[], int f, int r);
int main()
{
    struct timeval tv1, tv2;
    int a[20][20], q[20], visited[20], n, i, v, j, f = 0, r = -1;
    struct rusage r_usage;
    
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix: ");
    for(v = 0; v < n; v++)
    {
        for(i = 0; i < n; i++)
        {
            scanf("%d", &a[v][i]);
        }
    }
    printf("Enter the source node: "); 
    scanf("%d", &v);
    
    gettimeofday(&tv1, NULL);
    bfs(v, n, a, visited, q, f, r); 
    gettimeofday(&tv2, NULL);
    
    printf("\nThe BFS traversal is: ");
    for(i = 0; i < n; i++)
    {
        if(visited[i])
            printf("%d ", i);
    }

    printf("\nTime of BFS = %ld microseconds\n", ((tv2.tv_sec - tv1.tv_sec) * 1000000 + tv2.tv_usec - tv1.tv_usec)); 
    getrusage(RUSAGE_SELF, &r_usage);
    printf("Memory usage = %ld kilobytes\n", r_usage.ru_maxrss);
    return 0;
}

void bfs(int v, int n, int a[][20], int visited[], int q[], int f, int r)
{
    int i;
    for(i = 0; i < n; i++)
        visited[i] = 0; 
    q[++r] = v;
    visited[v] = 1;
    while(f <= r)
    {
        v = q[f++];
        for(i = 0; i < n; i++)
        {
            if(a[v][i] && !visited[i])
            {
                q[++r] = i;
                visited[i] = 1;
            }
        }
    }
}




//////////////////////



#include<stdio.h>
#include<sys/time.h>
#include<time.h>
#include<sys/resource.h>
void dfs(int v, int n, int a[][20], int reach[]);
int main()
{
    struct timeval tv1, tv2;
    int n, a[20][20], reach[20], i, v;
    struct rusage r_usage;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix: ");
    for(v = 0; v < n; v++)
    {
        for(i = 0; i < n; i++)
        {
            scanf("%d", &a[v][i]);
        }
    }
    printf("Enter the source vertex: ");
    scanf("%d", &v);
    printf("graph is connected\n");
    gettimeofday(&tv1, NULL);
    dfs(v, n, a, reach);
    gettimeofday(&tv2, NULL);
    printf("\nThe DFS traversal is: ");
    for(i = 0; i < n; i++)
    {
        if(reach[i])
            printf("%d ", i);
    }
    printf("\nTime of DFS = %f microseconds\n",(double)(tv2.tv_usec-tv1.tv_usec));
    getrusage(RUSAGE_SELF, &r_usage);
    printf("Memory usage = %ld kilobytes\n", r_usage.ru_maxrss);
    return 0;
}
void dfs(int v, int n, int a[][20], int reach[])
{
    int i;
    reach[v] = 1;
    for(i = 0; i < n; i++)
    {
        if(a[v][i] && !reach[i])
        {
            dfs(i, n, a, reach);
        }
    }
}






////////////////////////////////



#include<stdio.h>
#include<sys/time.h>
#include <sys/resource.h>
#include<stdlib.h>

void swap(int *a, int *b) {
int temp = *a;
*a = *b;
*b = temp;
}

void heapify(int arr[], int n, int i) {
int largest = i;
int left = 2 * i + 1;
int right = 2 * i + 2;

if (left < n && arr[left] > arr[largest])
largest = left;

if (right < n && arr[right] > arr[largest])
largest = right;

if (largest != i) {
swap(&arr[i], &arr[largest]);
heapify(arr, n, largest);
}
}
void heapSort(int arr[], int n) {

for (int i = n / 2 - 1; i >= 0; i--)
heapify(arr, n, i);

for (int i = n - 1; i >= 0; i--) {
swap(&arr[0], &arr[i]);

heapify(arr, i, 0);
}
}
void printArray(int arr[], int n) {
for (int i = 0; i < n; ++i)
printf("%d ", arr[i]);
printf("\n");
}
int main()
{
int n;
printf("Enter the size of the array: ");
scanf("%d",&n);
int *arr=(int*)malloc(n*sizeof(int));
printf("Enter the elements of array: \n");
for(int i=0;i<n;i++){
   scanf("%d",&arr[i]);
}


struct timeval start_time,end_time;
gettimeofday(&start_time,NULL);
heapSort(arr, n);
gettimeofday(&end_time,NULL);
printf("Sorted array:\n");
printArray(arr,n);
printf("Time of quick sort = %f microseconds",(double)end_time.tv_usec-start_time.tv_usec);

struct rusage r_usage;
getrusage(RUSAGE_SELF,&r_usage);
printf("\nMemory usage = %ld kilobytes ",r_usage.ru_maxrss);

free(arr);
return 0;
}

///////////////////////


#include <stdio.h>
#include <string.h>
#include<sys/time.h>
#include<sys/resource.h>
const int MAX = 256;

int fnHorspool(char string[], char pattern[],int []);
void fnGenShiftTable(char *,int []);


int main(void)
{
	char text[MAX];
	char pattern[MAX];
    	int shiftTable[MAX];
	int found;
	puts("Enter the source string : ");
	gets(text);
	puts("Enter the pattern string : ");
	gets(pattern);
	
	fnGenShiftTable(pattern,shiftTable);
	struct timeval startTime, endTime;
	gettimeofday(&startTime, NULL);
	found = fnHorspool(text,pattern,shiftTable);
	gettimeofday(&endTime, NULL);
	if(found==-1)
		puts("\nMatching Substring not found.\n");
	else
		printf("\nMatching Substring found at position: %d\n",found+1);
	printf("Time taken = %f microseconds\n", (double)endTime.tv_usec - (double)startTime.tv_usec);
	struct rusage r_usage;
	getrusage(RUSAGE_SELF, &r_usage);
	printf("Memory used %ld kilobytes\n", r_usage.ru_maxrss);
	return 0;
}

void fnGenShiftTable(char p[], int t[])
{
	int m, i, j;

	m = strlen(p);

	for(i=0; i<MAX; i++)
	{
		t[i]=m;
	}

	for(j=0; j<m-1; j++)
	{
		t[p[j]] = m-1-j;
	}
}

int fnHorspool(char s[],char p[],int t[])
{
	int i, n, m, k;

	n = strlen(s);
	m = strlen(p);
	i = m-1;
	while(i<n)
	{
		k = 0;
		while((k<m)&&(p[m-1-k]==s[i-k]))
			k++;

		if (k == m)
			return i-m+1;
		else
			i = i+t[s[i]];
	}

	return -1;
}


/////////////////////////


#include <stdio.h>
#include <sys/time.h>
#include <sys/resource.h>
#define MAX 100

void printMatrix(int matrix[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

void warshallAlgorithm(int graph[MAX][MAX], int n) {
    int reach[MAX][MAX];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            reach[i][j] = graph[i][j];
        }
    }
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                reach[i][j] = reach[i][j] || (reach[i][k] && reach[k][j]);
            }
        }
    }
    printf("Transitive closure of the given graph:\n");
    printMatrix(reach, n);
}

long getCurrentTime() {
    struct timeval time;
    gettimeofday(&time, NULL);
    return time.tv_sec * 1000000 + time.tv_usec;


}

long getMemoryUsage() {
    struct rusage usage;
    getrusage(RUSAGE_SELF, &usage);
    return usage.ru_maxrss;
}

int main() {
    int n;
    int graph[MAX][MAX];

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    long startTime = getCurrentTime();
    warshallAlgorithm(graph, n);
    long endTime = getCurrentTime();
    struct rusage r_usage;
    getrusage(RUSAGE_SELF, &r_usage);
    printf("Memory used: %ld kilobytes\n", r_usage.ru_maxrss);
    printf("Execution time: %ld microseconds\n", (endTime - startTime));

    return 0;
}



////////////////////////////////////



#include <stdio.h>
#include <sys/time.h>
#include <sys/resource.h>
#define MAX 100
#define INF 1000000

void printMatrix(int matrix[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] == INF) {
                printf("INF ");
            } else {
                printf("%d ", matrix[i][j]);
            }
        }
        printf("\n");
    }
}

void floydWarshall(int graph[MAX][MAX], int n) {
    int dist[MAX][MAX];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dist[i][j] = graph[i][j];
        }
    }
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
    printf("Shortest paths between all pairs of vertices:\n");
    printMatrix(dist, n);
}

long getCurrentTime() {
    struct timeval time;
    gettimeofday(&time, NULL);
    return time.tv_sec * 1000000 + time.tv_usec;
}

long getMemoryUsage() {
    struct rusage usage;
    getrusage(RUSAGE_SELF, &usage);
    return usage.ru_maxrss;
}

int main() {
    int n;
    int graph[MAX][MAX];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (use %d to represent infinity):\n", INF);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    long startTime = getCurrentTime();
    long startMemory = getMemoryUsage();

    floydWarshall(graph, n);

    long endTime = getCurrentTime();
    long endMemory = getMemoryUsage();

    printf("Execution time: %ld microseconds\n", (endTime - startTime));
    printf("Memory usage: %ld kilobytes\n", (endMemory - startMemory));

    return 0;
}



/////////////////////////////


#include <stdio.h>
#include <limits.h>
#include <stdbool.h>
#include <sys/time.h>
#include <sys/resource.h>
#define MAX 100
#define INF 999
int minDistance(int dist[], bool sptSet[], int n) {
    int min = INF, min_index;
    for (int v = 0; v < n; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v], min_index = v;
        }
    }
    return min_index;
}
void printPath(int parent[], int j) {
    if (parent[j] == -1) {
        return;
    }
    printPath(parent, parent[j]);
    printf("%d ", j);
}
void printSolution(int dist[], int n, int parent[], int src) {
    printf("Vertex\tDistance\tPath\n");
    for (int i = 0; i < n; i++) {
        printf("%d -> %d\t%d\t\t%d ", src, i, dist[i], src);
        printPath(parent, i);
        printf("\n");
    }
}
void dijkstra(int graph[MAX][MAX], int src, int n) {
    int dist[MAX];
    bool sptSet[MAX];
    int parent[MAX];

    for (int i = 0; i < n; i++) {
        dist[i] = INF, sptSet[i] = false;
        parent[i] = -1;
    }

    dist[src] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, sptSet, n);
        sptSet[u] = true;

        for (int v = 0; v < n; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
        }
    }

    printSolution(dist, n, parent, src);
}
long getCurrentTime() {
    struct timeval time;
    gettimeofday(&time, NULL);
    return time.tv_sec * 1000000 + time.tv_usec;
}
long getMemoryUsage() {
    struct rusage usage;
    getrusage(RUSAGE_SELF, &usage);
    return usage.ru_maxrss;
}
int main() {
    int n, src;
    int graph[MAX][MAX];
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix (use %d to represent infinity):\n", INF);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
            if (graph[i][j] == 0 && i != j) {
                graph[i][j] = INF;
            }
        }
    }
    printf("Enter the source vertex: ");
    scanf("%d", &src);
    long startTime = getCurrentTime();
    long startMemory = getMemoryUsage();
    dijkstra(graph, src, n);
    long endTime = getCurrentTime();
    long endMemory = getMemoryUsage();
    printf("Execution time: %ld microseconds\n", (endTime - startTime));
    printf("Memory usage: %ld kilobytes\n", (endMemory));
    return 0;
}



///////////////////////



